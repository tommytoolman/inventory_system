"""Add extended_attributes to shopify_listings

Revision ID: b5adac874ba0
Revises: cb02bcbc3fdb
Create Date: 2025-06-05 12:43:19.706591

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b5adac874ba0'
down_revision: Union[str, None] = 'cb02bcbc3fdb'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_activity_log_action', table_name='activity_log')
    op.drop_index('ix_activity_log_created_at', table_name='activity_log')
    op.drop_index('ix_activity_log_entity_id', table_name='activity_log')
    op.drop_index('ix_activity_log_entity_type', table_name='activity_log')
    op.drop_index('ix_activity_log_platform', table_name='activity_log')
    op.drop_table('activity_log')
    op.alter_column('category_mappings', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('category_mappings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('ebay_listings', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('ebay_listings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('ebay_listings', 'last_synced_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('orders', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('platform_common', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('platform_common', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.create_foreign_key(None, 'platform_common', 'products', ['product_id'], ['id'])
    op.add_column('products', sa.Column('title', sa.String(), nullable=True))
    op.alter_column('products', 'description',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('products', 'status',
               existing_type=postgresql.ENUM('DRAFT', 'ACTIVE', 'SOLD', 'ARCHIVED', name='productstatus'),
               server_default=None,
               existing_nullable=True)
    op.alter_column('products', 'is_sold',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('products', 'in_collective',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('products', 'in_inventory',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('products', 'in_reseller',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('products', 'free_shipping',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('products', 'buy_now',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('products', 'show_vat',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('products', 'local_pickup',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('products', 'available_for_shipment',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=True)
    op.alter_column('products', 'additional_images',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=True)
    op.drop_index('idx_products_sku', table_name='products')
    op.drop_index('idx_products_status', table_name='products')
    op.create_index(op.f('ix_products_status'), 'products', ['status'], unique=False)
    op.alter_column('reverb_listings', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('reverb_listings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('sales', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('sales', 'sale_date',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.create_foreign_key(None, 'sales', 'products', ['product_id'], ['id'])
    op.alter_column('shipments', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('shipments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('shipping_profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('shipping_profiles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.add_column('shopify_listings', sa.Column('extended_attributes', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.alter_column('shopify_listings', 'category_full_name',
               existing_type=sa.TEXT(),
               type_=sa.String(length=500),
               existing_nullable=True)
    op.alter_column('shopify_listings', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('shopify_listings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.drop_index('idx_shopify_category_gid', table_name='shopify_listings')
    op.drop_index('idx_shopify_category_status', table_name='shopify_listings')
    op.drop_index('idx_shopify_handle', table_name='shopify_listings')
    op.drop_index('idx_shopify_product_id', table_name='shopify_listings')
    op.create_index(op.f('ix_shopify_listings_category_gid'), 'shopify_listings', ['category_gid'], unique=False)
    op.create_index(op.f('ix_shopify_listings_handle'), 'shopify_listings', ['handle'], unique=False)
    op.create_index(op.f('ix_shopify_listings_shopify_legacy_id'), 'shopify_listings', ['shopify_legacy_id'], unique=False)
    op.create_index(op.f('ix_shopify_listings_shopify_product_id'), 'shopify_listings', ['shopify_product_id'], unique=False)
    op.alter_column('vr_listings', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('vr_listings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('vr_listings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('vr_listings', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.drop_index(op.f('ix_shopify_listings_shopify_product_id'), table_name='shopify_listings')
    op.drop_index(op.f('ix_shopify_listings_shopify_legacy_id'), table_name='shopify_listings')
    op.drop_index(op.f('ix_shopify_listings_handle'), table_name='shopify_listings')
    op.drop_index(op.f('ix_shopify_listings_category_gid'), table_name='shopify_listings')
    op.create_index('idx_shopify_product_id', 'shopify_listings', ['shopify_product_id'], unique=False)
    op.create_index('idx_shopify_handle', 'shopify_listings', ['handle'], unique=False)
    op.create_index('idx_shopify_category_status', 'shopify_listings', ['category_assignment_status'], unique=False)
    op.create_index('idx_shopify_category_gid', 'shopify_listings', ['category_gid'], unique=False)
    op.alter_column('shopify_listings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('shopify_listings', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('shopify_listings', 'category_full_name',
               existing_type=sa.String(length=500),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_column('shopify_listings', 'extended_attributes')
    op.alter_column('shipping_profiles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('shipping_profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('shipments', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('shipments', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.drop_constraint(None, 'sales', type_='foreignkey')
    op.alter_column('sales', 'sale_date',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('sales', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('reverb_listings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('reverb_listings', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.drop_index(op.f('ix_products_status'), table_name='products')
    op.create_index('idx_products_status', 'products', ['status'], unique=False)
    op.create_index('idx_products_sku', 'products', ['sku'], unique=True)
    op.alter_column('products', 'additional_images',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text("'[]'::jsonb"),
               existing_nullable=True)
    op.alter_column('products', 'available_for_shipment',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=True)
    op.alter_column('products', 'local_pickup',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)
    op.alter_column('products', 'show_vat',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=True)
    op.alter_column('products', 'buy_now',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=True)
    op.alter_column('products', 'free_shipping',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)
    op.alter_column('products', 'in_reseller',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)
    op.alter_column('products', 'in_inventory',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=True)
    op.alter_column('products', 'in_collective',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)
    op.alter_column('products', 'is_sold',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=True)
    op.alter_column('products', 'status',
               existing_type=postgresql.ENUM('DRAFT', 'ACTIVE', 'SOLD', 'ARCHIVED', name='productstatus'),
               server_default=sa.text("'DRAFT'::productstatus"),
               existing_nullable=True)
    op.alter_column('products', 'description',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_column('products', 'title')
    op.drop_constraint(None, 'platform_common', type_='foreignkey')
    op.alter_column('platform_common', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('platform_common', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('orders', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('ebay_listings', 'last_synced_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('ebay_listings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('ebay_listings', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('category_mappings', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.alter_column('category_mappings', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text("(now() AT TIME ZONE 'utc'::text)"))
    op.create_table('activity_log',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('platform', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='activity_log_pkey')
    )
    op.create_index('ix_activity_log_platform', 'activity_log', ['platform'], unique=False)
    op.create_index('ix_activity_log_entity_type', 'activity_log', ['entity_type'], unique=False)
    op.create_index('ix_activity_log_entity_id', 'activity_log', ['entity_id'], unique=False)
    op.create_index('ix_activity_log_created_at', 'activity_log', ['created_at'], unique=False)
    op.create_index('ix_activity_log_action', 'activity_log', ['action'], unique=False)
    # ### end Alembic commands ###
