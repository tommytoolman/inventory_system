"""Add sync_events table for audit logging

Revision ID: 209cae6d8bd4
Revises: c99ad3172b8c
Create Date: 2025-07-10 14:09:30.284024

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '209cae6d8bd4'
down_revision: Union[str, None] = 'c99ad3172b8c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('sync_events',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sync_run_id', sa.UUID(), nullable=False),
    sa.Column('platform_name', sa.String(), nullable=False),
    sa.Column('product_id', sa.Integer(), nullable=True),
    sa.Column('platform_common_id', sa.Integer(), nullable=True),
    sa.Column('external_id', sa.String(), nullable=False),
    sa.Column('change_type', sa.String(), nullable=False),
    sa.Column('change_data', sa.JSON(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('detected_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['platform_common_id'], ['platform_common.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sync_events_change_type'), 'sync_events', ['change_type'], unique=False)
    op.create_index(op.f('ix_sync_events_external_id'), 'sync_events', ['external_id'], unique=False)
    op.create_index(op.f('ix_sync_events_id'), 'sync_events', ['id'], unique=False)
    op.create_index(op.f('ix_sync_events_platform_common_id'), 'sync_events', ['platform_common_id'], unique=False)
    op.create_index(op.f('ix_sync_events_platform_name'), 'sync_events', ['platform_name'], unique=False)
    op.create_index(op.f('ix_sync_events_product_id'), 'sync_events', ['product_id'], unique=False)
    op.create_index(op.f('ix_sync_events_status'), 'sync_events', ['status'], unique=False)
    op.create_index(op.f('ix_sync_events_sync_run_id'), 'sync_events', ['sync_run_id'], unique=False)
    op.drop_table('platform_status_mappings')
    op.drop_index('idx_activity_log_created_at', table_name='activity_log')
    op.drop_index('idx_activity_log_entity', table_name='activity_log')
    op.drop_index('idx_activity_log_platform', table_name='activity_log')
    op.drop_table('activity_log')
    op.drop_constraint('uq_ebay_listings_ebay_item_id', 'ebay_listings', type_='unique')
    op.drop_constraint('platform_common_product_platform_unique', 'platform_common', type_='unique')
    op.drop_constraint('uq_reverb_listings_reverb_id', 'reverb_listings', type_='unique')
    op.drop_constraint('uq_shopify_listings_shopify_product_id', 'shopify_listings', type_='unique')
    op.drop_constraint('uq_vr_listings_vr_listing_id', 'vr_listings', type_='unique')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint('uq_vr_listings_vr_listing_id', 'vr_listings', ['vr_listing_id'])
    op.create_unique_constraint('uq_shopify_listings_shopify_product_id', 'shopify_listings', ['shopify_product_id'])
    op.create_unique_constraint('uq_reverb_listings_reverb_id', 'reverb_listings', ['reverb_listing_id'])
    op.create_unique_constraint('platform_common_product_platform_unique', 'platform_common', ['product_id', 'platform_name'])
    op.create_unique_constraint('uq_ebay_listings_ebay_item_id', 'ebay_listings', ['ebay_item_id'])
    op.create_table('activity_log',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('action', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('platform', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='activity_log_pkey')
    )
    op.create_index('idx_activity_log_platform', 'activity_log', ['platform'], unique=False)
    op.create_index('idx_activity_log_entity', 'activity_log', ['entity_type', 'entity_id'], unique=False)
    op.create_index('idx_activity_log_created_at', 'activity_log', ['created_at'], unique=False)
    op.create_table('platform_status_mappings',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('platform_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('platform_status', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('central_status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint("central_status::text = ANY (ARRAY['LIVE'::character varying, 'SOLD'::character varying, 'DRAFT'::character varying]::text[])", name='platform_status_mappings_central_status_check'),
    sa.PrimaryKeyConstraint('id', name='platform_status_mappings_pkey'),
    sa.UniqueConstraint('platform_name', 'platform_status', name='platform_status_mappings_platform_name_platform_status_key')
    )
    op.drop_index(op.f('ix_sync_events_sync_run_id'), table_name='sync_events')
    op.drop_index(op.f('ix_sync_events_status'), table_name='sync_events')
    op.drop_index(op.f('ix_sync_events_product_id'), table_name='sync_events')
    op.drop_index(op.f('ix_sync_events_platform_name'), table_name='sync_events')
    op.drop_index(op.f('ix_sync_events_platform_common_id'), table_name='sync_events')
    op.drop_index(op.f('ix_sync_events_id'), table_name='sync_events')
    op.drop_index(op.f('ix_sync_events_external_id'), table_name='sync_events')
    op.drop_index(op.f('ix_sync_events_change_type'), table_name='sync_events')
    op.drop_table('sync_events')
    # ### end Alembic commands ###
