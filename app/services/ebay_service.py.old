# app.services.ebay_service.py


# app/services/ebay_service.py - Updated

import logging
import asyncio

from datetime import datetime, timezone
from typing import Optional, Dict, List, Any
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import Session

from app.models.ebay import EbayListing
from app.models.platform_common import PlatformCommon, ListingStatus, SyncStatus
from app.schemas.platform.ebay import EbayListingCreate
from app.core.config import Settings
from app.core.enums import EbayListingStatus
from app.core.exceptions import EbayAPIError, ListingNotFoundError
from app.services.ebay.client import EbayClient
from app.services.ebay.trading import EbayTradingLegacyAPI

logger = logging.getLogger(__name__)

class EbayService:
    """
    Key features of the EbayService:

    Purpose: Manages the lifecycle and high-level operations for eBay listings within your application.

    Role: Acts as the primary service layer for eBay-specific business logic, bridging your local database state with the eBay platform state via its client.

    Functionality:

    1. Draft Creation:
        - Creates local database records
        - Prepares data for eBay API
        - Creates draft on eBay but doesn't publish

    2. Publishing:
        - Handles transition from draft to active
        - Updates sync status
        - Manages platform_common status

    3. Status Management:
        - Syncs status with eBay
        - Updates local records
        - Handles errors and rollbacks


    Error Handling:
    - Proper exception handling
    - Transaction management
    - Status tracking

    It interacts with local models (EbayListing, PlatformCommon, Product) and orchestrates calls to an EbayClient (presumably defined elsewhere, 
    likely app/services/ebay/client.py) to interact with the actual eBay API. It handles preparing data in the format eBay expects.

    """
    
    def __init__(self, db: AsyncSession, settings: Settings):
        self.db = db
        self.settings = settings
        self._api_key = settings.EBAY_API_KEY
        self._api_secret = settings.EBAY_API_SECRET
        self._sandbox_mode = settings.EBAY_SANDBOX_MODE
        self.client = EbayClient()  # Use our new client

    async def create_draft_listing(
        self,
        platform_id: int,
        listing_data: Dict[str, Any]
    ) -> EbayListing:
        """
        Creates a draft listing on eBay.
        Does not publish - just prepares the listing data.
        """
        try:
            # Get platform common record
            platform_common = await self._get_platform_common(platform_id)
            if not platform_common:
                raise ListingNotFoundError(f"Platform listing {platform_id} not found")

            # Create eBay listing record
            ebay_listing = await self._create_listing_record(platform_common, listing_data)

            # Prepare listing data for eBay API
            inventory_item = self._prepare_inventory_item(ebay_listing, platform_common.product)
            
            # Create inventory item on eBay
            success = await self.client.create_or_update_inventory_item(
                sku=platform_common.product.sku,
                item_data=inventory_item
            )

            if success:
                # Create an offer for the inventory item
                offer_data = self._prepare_offer_data(ebay_listing, platform_common.product)
                offer_result = await self.client.create_offer(offer_data)
                
                # Update listing with eBay offer ID
                ebay_listing.ebay_item_id = offer_result.get('offerId')
                ebay_listing.listing_status = EbayListingStatus.DRAFT
                platform_common.sync_status = SyncStatus.SUCCESS
                platform_common.last_sync = datetime.now(timezone.utc)()
                
                await self.db.flush()
                await self.db.commit()
            else:
                raise EbayAPIError("Failed to create inventory item on eBay")

            return ebay_listing

        except Exception as e:
            await self.db.rollback()
            if isinstance(e, EbayAPIError) or isinstance(e, ListingNotFoundError):
                raise
            raise EbayAPIError(f"Failed to create eBay draft: {str(e)}")

    async def publish_listing(self, ebay_listing_id: int) -> bool:
        """
        Publishes a draft listing to eBay.
        Returns True if successful.
        """
        try:
            listing = await self._get_ebay_listing(ebay_listing_id)
            if not listing:
                raise ListingNotFoundError(f"eBay listing {ebay_listing_id} not found")

            # Call eBay API to publish the offer
            result = await self.client.publish_offer(listing.ebay_item_id)
            
            if 'listingId' in result:
                # Update statuses
                listing.listing_status = EbayListingStatus.ACTIVE
                listing.platform_listing.status = ListingStatus.ACTIVE
                listing.platform_listing.sync_status = SyncStatus.SUCCESS
                listing.platform_listing.external_id = result['listingId']
                listing.last_synced_at = datetime.now(timezone.utc)()
                
                await self.db.commit()
                return True

            return False

        except Exception as e:
            await self.db.rollback()
            if isinstance(e, EbayAPIError) or isinstance(e, ListingNotFoundError):
                raise
            raise EbayAPIError(f"Failed to publish listing: {str(e)}")

    async def update_inventory_quantity(self, ebay_listing_id: int, quantity: int) -> bool:
        """
        Updates inventory quantity for an eBay listing
        """
        try:
            listing = await self._get_ebay_listing(ebay_listing_id)
            if not listing:
                raise ListingNotFoundError(f"eBay listing {ebay_listing_id} not found")
                
            product = listing.platform_listing.product
            
            # Update on eBay
            success = await self.client.update_inventory_item_quantity(
                sku=product.sku,
                quantity=quantity
            )
            
            if success:
                # Update record timestamps
                listing.last_synced_at = datetime.now(timezone.utc)()
                listing.platform_listing.last_sync = datetime.now(timezone.utc)()
                listing.platform_listing.sync_status = SyncStatus.SUCCESS
                await self.db.commit()
                
            return success
        
        except Exception as e:
            await self.db.rollback()
            if isinstance(e, EbayAPIError) or isinstance(e, ListingNotFoundError):
                raise
            raise EbayAPIError(f"Failed to update inventory quantity: {str(e)}")

    # Private helper methods
    async def _get_platform_common(self, platform_id: int) -> Optional[PlatformCommon]:
        query = select(PlatformCommon).where(PlatformCommon.id == platform_id)
        result = await self.db.execute(query)
        return result.scalar_one_or_none()

    async def _get_ebay_listing(self, listing_id: int) -> Optional[EbayListing]:
        query = select(EbayListing).where(EbayListing.id == listing_id)
        result = await self.db.execute(query)
        return result.scalar_one_or_none()

    async def _create_listing_record(
        self,
        platform_common: PlatformCommon,
        listing_data: Dict[str, Any]
    ) -> EbayListing:
        """Creates the local EbayListing record."""
        ebay_listing = EbayListing(
            platform_id=platform_common.id,
            ebay_category_id=listing_data.get("category_id"),
            ebay_condition_id=listing_data.get("condition_id"),
            format=listing_data.get("format", "Buy it Now"),
            price=listing_data.get("price", 0),
            listing_duration=listing_data.get("duration", "GTC"),
            item_specifics=listing_data.get("item_specifics", {}),
            listing_status=EbayListingStatus.DRAFT
        )
        self.db.add(ebay_listing)
        await self.db.flush()
        return ebay_listing

    def _prepare_inventory_item(self, listing: EbayListing, product: Any) -> Dict[str, Any]:
        """
        Prepares inventory item data for eBay API.
        """
        return {
            "availability": {
                "shipToLocationAvailability": {
                    "quantity": 1
                }
            },
            "condition": listing.ebay_condition_id,
            "product": {
                "title": f"{product.brand} {product.model}",
                "description": product.description or f"{product.brand} {product.model}",
                "aspects": self._convert_item_specifics(listing.item_specifics),
                "imageUrls": [product.primary_image] + (product.additional_images or [])
            }
        }
    
    def _prepare_offer_data(self, listing: EbayListing, product: Any) -> Dict[str, Any]:
        """
        Prepares offer data for eBay API.
        """
        return {
            "sku": product.sku,
            "marketplaceId": "EBAY_US",  # Could be configurable
            "format": "FIXED_PRICE" if listing.format == "Buy it Now" else "AUCTION",
            "availableQuantity": 1,  # Initial quantity
            "categoryId": listing.ebay_category_id,
            "listingPolicies": {
                "paymentPolicyId": listing.payment_policy_id,
                "returnPolicyId": listing.return_policy_id,
                "shippingPolicyId": listing.shipping_policy_id,
                "fulfillmentPolicyId": listing.shipping_policy_id  # Often the same
            },
            "pricingSummary": {
                "price": {
                    "currency": "USD",  # Could be configurable
                    "value": str(listing.price)
                }
            },
            "listingDescription": product.description or f"{product.brand} {product.model}"
        }
    
    def _convert_item_specifics(self, item_specifics: Dict[str, Any]) -> Dict[str, List[str]]:
        """
        Convert item specifics to eBay's required format
        """
        result = {}
        for key, value in item_specifics.items():
            if isinstance(value, list):
                result[key] = value
            else:
                result[key] = [str(value)]
        return result
    
class EbayInventoryService:
    """
    Service for fetching and managing eBay inventory
    Provides a unified interface that might use either the REST API
    or the older Trading API under the hood as needed
    """
    
    def __init__(self, sandbox: bool = False):
        """
        Initialize eBay inventory service
        
        Args:
            sandbox: Whether to use sandbox environment
        """
        self.sandbox = sandbox
        self.rest_client = EbayClient()  # REST API client
        self.trading_api = EbayTradingLegacyAPI(sandbox=sandbox)  # Trading API client
        self.expected_user_id = "londonvintagegts"  # Your expected eBay user ID
    
    async def verify_credentials(self) -> bool:
        """
        Verify eBay credentials and check user ID
        
        Returns:
            bool: True if credentials are valid and user ID matches
        """
        user_info = await self.trading_api.get_user_info()
        
        if not user_info.get('success'):
            logger.error(f"Failed to get eBay user info: {user_info.get('message')}")
            return False
        
        user_id = user_info.get('user_data', {}).get('UserID')
        if user_id != self.expected_user_id:
            logger.error(f"Unexpected eBay user: {user_id}, expected: {self.expected_user_id}")
            return False
        
        logger.info(f"Successfully authenticated as eBay user: {user_id}")
        return True
    
    async def get_all_active_listings(self) -> List[Dict[str, Any]]:
        """
        Get all active eBay listings with pagination
        Uses Trading API for better listing information
        
        Returns:
            List of all active listings
        """
        # First get the first page to determine total pages
        first_page = await self.trading_api.get_active_listings(page_num=1)
        
        # Extract pagination info
        pagination_result = first_page.get('PaginationResult', {})
        total_pages = int(pagination_result.get('TotalNumberOfPages', '1'))
        total_entries = int(pagination_result.get('TotalNumberOfEntries', '0'))
        
        logger.info(f"Found {total_entries} eBay listings across {total_pages} pages")
        
        # Get all items from the first page
        all_items = []
        items = first_page.get('ItemArray', {}).get('Item', [])
        if items and not isinstance(items, list):
            items = [items]
        
        if items:
            all_items.extend(items)
        
        # Get remaining pages in parallel
        if total_pages > 1:
            tasks = [self.trading_api.get_active_listings(page_num=page) for page in range(2, total_pages + 1)]
            results = await asyncio.gather(*tasks)
            
            for result in results:
                items = result.get('ItemArray', {}).get('Item', [])
                if items:
                    if not isinstance(items, list):
                        items = [items]
                    all_items.extend(items)
        
        return all_items
    
    async def get_active_listing_count(self) -> int:
        """
        Get count of active eBay listings
        
        Returns:
            int: Number of active listings
        """
        first_page = await self.trading_api.get_active_listings(page_num=1, items_per_page=1)
        
        # Extract pagination info
        pagination_result = first_page.get('PaginationResult', {})
        total_entries = int(pagination_result.get('TotalNumberOfEntries', '0'))
        
        return total_entries
    
    async def get_listing_details(self, item_id: str) -> Dict[str, Any]:
        """
        Get detailed information for a specific listing
        
        Args:
            item_id: The eBay item ID
            
        Returns:
            Dict: Detailed listing information
        """
        # Implement item details retrieval
        # This could be implemented using Trading API GetItem call
        pass

    
class EbayInventorySync:
    """Service for syncing eBay inventory with the database"""
    
    def __init__(self, db: Session, sandbox: bool = False):
        """
        Initialize the inventory sync service
        
        Args:
            db: Database session
            sandbox: Whether to use eBay sandbox
        """
        self.db = db
        self.inventory_service = EbayInventoryService(sandbox=sandbox)
        self.expected_user_id = "londonvintagegts"  # Your eBay seller ID
    
    async def sync_inventory(self) -> Dict[str, int]:
        """
        Sync all eBay inventory to database
        
        Returns:
            Dict with statistics about the sync operation
        """
        # Initialize result stats
        results = {
            "total": 0,
            "created": 0,
            "updated": 0,
            "errors": 0
        }
        
        # Verify eBay user
        if not await self.inventory_service.verify_credentials():
            logger.error("Failed to verify eBay user, canceling sync")
            return results
        
        # Get all active listings from eBay
        logger.info("Fetching all active eBay listings")
        listings = await self.inventory_service.get_all_active_listings()
        results["total"] = len(listings)
        
        logger.info(f"Processing {len(listings)} eBay listings")
        
        # Process each listing
        for listing in listings:
            try:
                # Check if listing exists and process it accordingly
                await self._process_listing(listing)
                
                # Update stats based on operation result
                if listing.get("_operation_result") == "created":
                    results["created"] += 1
                elif listing.get("_operation_result") == "updated":
                    results["updated"] += 1
                
            except Exception as e:
                logger.exception(f"Error processing listing {listing.get('ItemID')}: {str(e)}")
                results["errors"] += 1
        
        # Commit changes
        self.db.commit()
        
        return results
    
    async def _process_listing(self, listing: Dict[str, Any]) -> None:
        """
        Process an individual eBay listing
        
        Args:
            listing: eBay listing data
        """
        item_id = listing.get('ItemID')
        
        # Check if this listing already exists
        stmt = select(EbayListing).where(EbayListing.ebay_item_id == item_id)
        result = self.db.execute(stmt)
        existing_listing = result.scalars().first()
        
        if existing_listing:
            # Update existing listing
            await self._update_listing(existing_listing, listing)
            listing["_operation_result"] = "updated"
        else:
            # Create new listing
            await self._create_listing(listing)
            listing["_operation_result"] = "created"
    
    async def _create_listing(self, listing: Dict[str, Any]) -> None:
        """
        Create a new eBay listing in the database
        
        Args:
            listing: eBay listing data
        """
        # Extract necessary data from the listing
        item_id = listing.get('ItemID')
        
        # Extract price
        selling_status = listing.get('SellingStatus', {})
        price_data = selling_status.get('CurrentPrice', {})
        price = float(price_data.get('#text', '0.0'))
        
        # Extract quantity
        quantity = int(listing.get('QuantityAvailable', '1'))
        
        # Extract listing format
        listing_type = listing.get('ListingType', '')
        format_mapping = {
            'Chinese': 'AUCTION',
            'FixedPriceItem': 'BUY_IT_NOW'
        }
        format_value = format_mapping.get(listing_type, 'BUY_IT_NOW')
        
        # Extract policy IDs from SellerProfiles if available
        seller_profiles = listing.get('SellerProfiles', {})
        payment_policy_id = None
        return_policy_id = None
        shipping_policy_id = None
        
        if seller_profiles:
            payment_profile = seller_profiles.get('SellerPaymentProfile', {})
            return_profile = seller_profiles.get('SellerReturnProfile', {})
            shipping_profile = seller_profiles.get('SellerShippingProfile', {})
            
            payment_policy_id = payment_profile.get('PaymentProfileID') if payment_profile else None
            return_policy_id = return_profile.get('ReturnProfileID') if return_profile else None
            shipping_policy_id = shipping_profile.get('ShippingProfileID') if shipping_profile else None
        
        # Extract category information
        primary_category = listing.get('PrimaryCategory', {})
        secondary_category = listing.get('SecondaryCategory', {})
        ebay_category_id = primary_category.get('CategoryID') if primary_category else None
        ebay_second_category_id = secondary_category.get('CategoryID') if secondary_category else None
        
        # Extract listing duration
        listing_duration = listing.get('ListingDuration', '')
        
        # Extract condition ID if available
        condition_id = listing.get('ConditionID')
        
        # Create new ebay_listing record
        now = datetime.now(timezone.utc)()
        new_listing = EbayListing(
            # We're not setting platform_id here - that would be set when
            # integrating with your platform_common table
            ebay_item_id=item_id,
            ebay_category_id=ebay_category_id,
            ebay_second_category_id=ebay_second_category_id,
            format=format_value,
            price=price,
            quantity=quantity,
            payment_policy_id=payment_policy_id,
            return_policy_id=return_policy_id,
            shipping_policy_id=shipping_policy_id,
            item_specifics=listing.get('ItemSpecifics', {}),
            listing_duration=listing_duration,
            listing_status='ACTIVE',
            created_at=now,
            updated_at=now,
            last_synced_at=now,
            ebay_condition_id=condition_id
            # package_weight and package_dimensions would need additional work
            # to extract from the listing
        )
        
        self.db.add(new_listing)
    
    async def _update_listing(self, existing_listing: EbayListing, listing: Dict[str, Any]) -> None:
        """
        Update an existing eBay listing in the database
        
        Args:
            existing_listing: Existing EbayListing object
            listing: Updated eBay listing data
        """
        # Extract necessary data from the listing
        selling_status = listing.get('SellingStatus', {})
        price_data = selling_status.get('CurrentPrice', {})
        price = float(price_data.get('#text', '0.0'))
        
        # Extract quantity
        quantity = int(listing.get('QuantityAvailable', '1'))
        
        # Extract listing format
        listing_type = listing.get('ListingType', '')
        format_mapping = {
            'Chinese': 'AUCTION',
            'FixedPriceItem': 'BUY_IT_NOW'
        }
        format_value = format_mapping.get(listing_type, existing_listing.format or 'BUY_IT_NOW')
        
        # Extract policy IDs from SellerProfiles if available
        seller_profiles = listing.get('SellerProfiles', {})
        payment_policy_id = existing_listing.payment_policy_id
        return_policy_id = existing_listing.return_policy_id
        shipping_policy_id = existing_listing.shipping_policy_id
        
        if seller_profiles:
            payment_profile = seller_profiles.get('SellerPaymentProfile', {})
            return_profile = seller_profiles.get('SellerReturnProfile', {})
            shipping_profile = seller_profiles.get('SellerShippingProfile', {})
            
            if payment_profile and 'PaymentProfileID' in payment_profile:
                payment_policy_id = payment_profile.get('PaymentProfileID')
            if return_profile and 'ReturnProfileID' in return_profile:
                return_policy_id = return_profile.get('ReturnProfileID')
            if shipping_profile and 'ShippingProfileID' in shipping_profile:
                shipping_policy_id = shipping_profile.get('ShippingProfileID')
        
        # Extract category information
        primary_category = listing.get('PrimaryCategory', {})
        secondary_category = listing.get('SecondaryCategory', {})
        ebay_category_id = primary_category.get('CategoryID') if primary_category else existing_listing.ebay_category_id
        ebay_second_category_id = secondary_category.get('CategoryID') if secondary_category else existing_listing.ebay_second_category_id
        
        # Extract listing duration
        listing_duration = listing.get('ListingDuration', existing_listing.listing_duration)
        
        # Extract condition ID if available
        condition_id = listing.get('ConditionID', existing_listing.ebay_condition_id)
        
        # Update the existing listing
        now = datetime.now(timezone.utc)()
        existing_listing.price = price
        existing_listing.quantity = quantity
        existing_listing.format = format_value
        existing_listing.payment_policy_id = payment_policy_id
        existing_listing.return_policy_id = return_policy_id
        existing_listing.shipping_policy_id = shipping_policy_id
        existing_listing.ebay_category_id = ebay_category_id
        existing_listing.ebay_second_category_id = ebay_second_category_id
        existing_listing.listing_duration = listing_duration
        existing_listing.updated_at = now
        existing_listing.last_synced_at = now
        existing_listing.ebay_condition_id = condition_id
        existing_listing.item_specifics = listing.get('ItemSpecifics', existing_listing.item_specifics or {})
        existing_listing.listing_status = 'ACTIVE'


