# app/services/vintageandrare/client.py

import asyncio
import logging
import requests

from typing import Dict, Any, Optional
from datetime import datetime, timezone
from pathlib import Path

from app.services.category_mapping_service import CategoryMappingService

logger = logging.getLogger(__name__)

class VintageAndRareClient:
    """
    Purpose: Primary interface; client for interacting with the Vintage & Rare marketplace.
    
    Aims to handle authentication (requests), category mapping (using CategoryMappingService), 
    and orchestrating listing creation (Notesing) by calling the Selenium automation script (inspect_form.py).
    Overall : abstraction layer which separates requests-based auth/mapping from the Selenium part and handles the async/blocking integration correctly. 
        The main complexity lies within the inspect_form.py script it calls. The lack of a real external ID retrieval post-creation is a limitation to be aware of.
    
    
    - Authentication (authenticate): 
        Uses the 'requests' library to perform a standard form login. 
        Checks for success indicators (Sign out text or account in URL). 
        Requests more efficient than using Selenium just for login if only requests are needed for subsequent actions (e.g. downloading inventory via download_inventory.py).
    
    - Category Mapping (map_category):
        Uses the CategoryMappingService (if a db_session is provided during init) to find V&R category/subcategory IDs based on internal IDs or names.
        Includes fallback logic to default mappings or a hardcoded default ("Electric Guitars / Solid Body").
        Async method as it interacts with the async CategoryMappingService.
    
    - Listing Creation (Notesing):
        Bridge to the Selenium automation. It takes system's product_data dictionary calling map_category first.
        Transforms the product_data into the form_data structure expected by inspect_form.py, including handling image lists (primary + additional).
        Key Point: It runs the blocking Selenium function _run_form_automation (which calls inspect_form.login_and_navigate) within an asyncio.get_event_loop().run_in_executor(None, ...) 
            call, the correct way to run blocking I/O (like Selenium) within an async application without blocking the event loop.
        The _run_form_automation wrapper handles the actual call to inspect_form.login_and_navigate and formats the success/error response. 
            It currently generates a fake external_id (e.g., VR-YYYYMMDDHHMMSS) because getting the real ID back from the V&R website after 
            form submission via Selenium is often difficult. This is a common challenge with scraping/automation â€“ you might need to implement a 
            subsequent step to find the newly created listing and get its real ID if necessary (e.g. via export)

    Dependencies: requests, asyncio, logging, CategoryMappingService, and crucially, it imports and uses inspect_form.py for the core automation.

    """
    
    BASE_URL = "https://www.vintageandrare.com"
    LOGIN_URL = f"{BASE_URL}/do_login"
    
    def __init__(self, username: str, password: str, db_session=None):
        """
        Initialize the V&R client.
        
        Args:
            username: V&R login username
            password: V&R login password
        """
        self.username = username
        self.password = password
        self.session = requests.Session()
        self.authenticated = False
        self.db_session = db_session
        
        # Default headers
        self.headers = {
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.9',
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36'
        }
        
        # Initialize mapping service if DB session is provided
        self.mapping_service = CategoryMappingService(db_session) if db_session else None
        
    async def authenticate(self) -> bool:
        """
        Authenticate with V&R website.
        
        Returns:
            bool: True if authentication is successful
        """
        try:
            # First get the main page to set up cookies
            self.session.get(self.BASE_URL, headers=self.headers)
            
            # Prepare login data
            login_data = {
                'username': self.username,
                'pass': self.password,
                'open_where': 'header'
            }
            
            # Submit login form
            response = self.session.post(
                self.LOGIN_URL,
                data=login_data,
                headers=self.headers,
                allow_redirects=True
            )
            
            # Check if login was successful
            self.authenticated = 'Sign out' in response.text or 'account' in response.url
            
            logger.info(f"V&R Authentication {'successful' if self.authenticated else 'failed'}")
            return self.authenticated
            
        except Exception as e:
            logger.error(f"V&R Authentication error: {str(e)}")
            self.authenticated = False
            return False

    async def map_category(self, category_name: str, category_id: str = None) -> Dict[str, str]:
        """
        Map a category from our system to V&R category IDs using the database.
        
        Args:
            category_name: Category name from our system
            category_id: Category ID from our system (if available)
            
        Returns:
            Dict with category_id and subcategory_id for V&R
        """
        if not self.mapping_service or not self.db_session:
            logger.warning("No DB session available for category mapping")
            # Fallback to default V&R category
            return {"category_id": "51", "subcategory_id": "63"}
        
        mapping = None
        
        # Try to find mapping by ID if available
        if category_id:
            mapping = await self.mapping_service.get_mapping("internal", category_id, "vr")
        
        # If no mapping found by ID, try by name
        if not mapping and category_name:
            mapping = await self.mapping_service.get_mapping_by_name("internal", category_name, "vr")
        
        # If still no mapping, get default
        if not mapping:
            mapping = await self.mapping_service.get_default_mapping("vr")
            logger.warning(f"Using default mapping for category '{category_name}'")
        
        if mapping:
            return {
                "category_id": mapping.target_id,
                "subcategory_id": mapping.target_subcategory_id
            }
        
        # Ultimate fallback - hard-coded default
        logger.warning(f"No mapping found for '{category_name}', using hard-coded default")
        return {"category_id": "51", "subcategory_id": "63"}  # Default to Electric Guitars / Solid Body

    async def create_listing(self, product_data: Dict[str, Any], test_mode: bool = True) -> Dict[str, Any]:
        """
        Create a listing on V&R using Selenium automation.
        
        Args:
            product_data: Product data for the listing
            test_mode: If True, form will be filled but not submitted
            
        Returns:
            Dict with status and message
        """
        # Import the Selenium automation code
        from app.services.vintageandrare.inspect_form import login_and_navigate, fill_item_form
        
        try:
            # Map the category to V&R category IDs
            category_mapping = await self.map_category(
                product_data.get('category', ''),
                str(product_data.get('id', ''))
            )
            
            # Convert product data to the format expected by the form automation
            # Convert product data to the format expected by the form automation
            form_data = {
                # Required fields
                'brand': product_data.get('brand', ''),
                'model_name': product_data.get('model', ''),
                'price': str(product_data.get('price', 0)),
                
                # Set category and subcategory IDs from mapping
                'category': category_mapping['category_id'],
                'subcategory': category_mapping['subcategory_id'],
                
                # Optional fields
                'year': product_data.get('year'),
                'decade': product_data.get('decade'),
                'finish_color': str(product_data.get('finish', '')) if product_data.get('finish') is not None else '',
                'description': str(product_data.get('description', '')) if product_data.get('description') is not None else '',
                'processing_time': product_data.get('processing_time') if product_data.get('processing_time') is not None else '3',
                'time_unit': product_data.get('time_unit', 'Days'),
                'youtube_url': str(product_data.get('video_url', '')) if product_data.get('video_url') is not None else '',
                'external_url': str(product_data.get('external_link', '')) if product_data.get('external_link') is not None else '',
                'show_vat': product_data.get('show_vat', True),
                
                # V&R specific fields
                'in_collective': product_data.get('in_collective', False),
                'in_inventory': product_data.get('in_inventory', True),
                'in_reseller': product_data.get('in_reseller', False),
                'collective_discount': product_data.get('collective_discount'),
                'price_notax': product_data.get('price_notax'),
                
                # Shipping info
                'shipping': product_data.get('available_for_shipment', True),
                'local_pickup': product_data.get('local_pickup', False),
                'shipping_fees': {
                    'europe': product_data.get('europe_shipping', '50'),
                    'usa': product_data.get('usa_shipping', '100'),
                    'uk': product_data.get('uk_shipping', '20'),
                    'world': product_data.get('world_shipping', '150')
                },
                
                # Images
                'images': []
            }

            # Add primary image if available
            if product_data.get('primary_image'):
                form_data['images'].append(product_data['primary_image'])
            
            # Add additional images if available
            if product_data.get('additional_images'):
                if isinstance(product_data['additional_images'], list):
                    form_data['images'].extend(product_data['additional_images'])
                else:
                    # Parse as JSON if it's a string
                    try:
                        import json
                        additional = json.loads(product_data['additional_images'])
                        if isinstance(additional, list):
                            form_data['images'].extend(additional)
                    except Exception:
                        # If parsing fails, assume it's a single URL
                        form_data['images'].append(product_data['additional_images'])
            
            # Log the form data for debugging
            logger.info(f"Sending form data to V&R: {form_data}")
            print(f"Mapped category '{product_data.get('category')}' to category_id={form_data['category']}, subcategory_id={form_data['subcategory']}")
                        
            # Run the form automation in a separate thread since Selenium is blocking and we're in an async function
            loop = asyncio.get_event_loop()
            result = await loop.run_in_executor(
                None,
                lambda: self._run_form_automation(form_data, test_mode)
            )
            
            return result
            
        except Exception as e:
            logger.error(f"Error creating V&R listing: {str(e)}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            return {
                "status": "error",
                "message": f"Error: {str(e)}",
                "timestamp": datetime.now().isoformat()
            }
    
    def _run_form_automation(self, form_data: Dict[str, Any], test_mode: bool) -> Dict[str, Any]:
        """
        Run the Selenium form automation.
        This is a blocking function that should be run in a separate thread.
        
        Args:
            form_data: Form data for the listing
            test_mode: If True, form will be filled but not submitted
            
        Returns:
            Dict with status and message
        """
        
        from app.services.vintageandrare.inspect_form import login_and_navigate
        
        try:
            # This function is blocking and will run the Selenium automation
            login_and_navigate(
                username=self.username,
                password=self.password,
                item_data=form_data,
                test_mode=test_mode
            )
            
            # Since we can't get the listing ID easily from the automation,
            # we'll generate a fake one for now
            # external_id = f"VR-{datetime.now().strftime('%Y%m%d%H%M%S')}"
            # Since retrieving the ID immediately after Selenium submission is hard (as the comment notes), r
            # returning None for vr_product_id is the most practical approach for now.
            # We absolutely need a follow-up step. After a successful Notesing call (which now returns vr_product_id=None), 
            # the system should rely on the next inventory download (download_inventory.py). When processing that downloaded CSV, 
            # we need logic (likely triggered by vintageandrare_service.py) to:
            #  - Identify rows in the CSV that don't have a corresponding PlatformCommon entry for V&R in our database.
            # - Match these new V&R items back to our internal Product based on attributes we did submit (e.g., the SKU sent as V&R's external_id, or maybe a combination of Brand/Model/Price).
            # - Once matched, create the PlatformCommon record (or update a placeholder) storing the correct V&R product_id from the CSV.
            
            return {
                "status": "success",
                "message": "Listing created successfully" if not test_mode else "Test mode: form filled but not submitted",
                "vr_product_id": None,
                "timestamp": datetime.now().isoformat()
            }
        except Exception as e:
            import traceback
            logger.error(f"Selenium automation error: {traceback.format_exc()}")
            return {
                "status": "error",
                "message": f"Selenium automation error: {str(e)}",
                "timestamp": datetime.now().isoformat()
            }