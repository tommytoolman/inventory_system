import os
import re
import io
import tempfile
import requests
import pandas as pd
from datetime import datetime, timezone
from pathlib import Path
from typing import Optional, Dict, Any, Union, Tuple

class VRInventoryManager:
    """
    Purpose: Specifically designed to handle downloading the inventory CSV from V&R using requests.
    
    Handles interaction with the VintageAndRare website for inventory management.
    
    This class provides methods to:
    - Authenticate with VintageAndRare
    - Download inventory data directly to memory as a DataFrame
    - Optionally save inventory data to disk
    - Process and transform inventory data as needed
    
    It uses direct HTTP requests rather than browser automation for efficiency,
    making it suitable for headless operation in production environments.
    """
    
    BASE_URL = "https://www.vintageandrare.com"
    LOGIN_URL = f"{BASE_URL}/do_login"
    EXPORT_URL = f"{BASE_URL}/instruments/export_inventory/export_inventory"
    
    def __init__(self, username: str, password: str):
        """
        Initialize the inventory manager with credentials.
        
        Args:
            username: VintageAndRare login username
            password: VintageAndRare login password
        """
        self.username = username
        self.password = password
        
        # Initialize session
        self.session = requests.Session()
        self.headers = {
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
            'Accept-Language': 'en-US,en;q=0.9',
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36'
        }
        
        # Authentication state
        self.authenticated = False
        
        # Temporary files tracking
        self.temp_files = []
    
    def authenticate(self) -> bool:
        """
        Authenticate with VintageAndRare website.
        
        Returns:
            bool: True if authentication is successful, False otherwise
        """
        try:
            # First get the main page to set up cookies
            self.session.get(self.BASE_URL, headers=self.headers)
            
            # Prepare login data
            login_data = {
                'username': self.username,
                'pass': self.password,
                'open_where': 'header'
            }
            
            # Submit login form
            response = self.session.post(
                self.LOGIN_URL,
                data=login_data,
                headers=self.headers,
                allow_redirects=True
            )
            
            # Check if login was successful by looking for indicators in the response
            self.authenticated = 'Sign out' in response.text or 'account' in response.url
            
            return self.authenticated
            
        except Exception as e:
            print(f"Authentication error: {str(e)}")
            self.authenticated = False
            return False
    
    def get_inventory(self, save_to_file: bool = False, output_path: Optional[str] = None) -> Optional[pd.DataFrame]:
        """
        Download and process inventory directly to a DataFrame.
        
        Args:
            save_to_file: Whether to also save the raw data to a file
            output_path: Path where to save the file (if save_to_file is True)
                         If not provided, a temporary file will be created
        
        Returns:
            pandas.DataFrame: Processed inventory data, or None if any step failed
        """
        if not self.authenticated and not self.authenticate():
            print("Not authenticated. Please authenticate first.")
            return None
        
        try:
            # Download the inventory file
            response = self.session.get(
                self.EXPORT_URL,
                headers=self.headers,
                allow_redirects=True,
                stream=True
            )
            
            # Check response status
            if response.status_code != 200:
                print(f"Download failed with status code: {response.status_code}")
                return None
            
            # Get filename for reference or saving
            content_disposition = response.headers.get('content-disposition', '')
            if 'filename=' in content_disposition:
                filename_match = re.search(r'filename=(.+?)($|;)', content_disposition)
                if filename_match:
                    filename = filename_match.group(1)
                else:
                    filename = f"vintageandrare_inventory_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            else:
                filename = f"vintageandrare_inventory_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            
            # Stream data directly into a pandas DataFrame
            csv_data = io.StringIO()
            
            # Manually decode the response content
            for chunk in response.iter_content(chunk_size=8192):
                csv_data.write(chunk.decode('utf-8', errors='replace'))
            
            # Reset the StringIO buffer to the beginning
            csv_data.seek(0)
            
            # Read the CSV data into a DataFrame
            df = pd.read_csv(csv_data)
            
            # Save to file if requested
            if save_to_file:
                if output_path:
                    file_path = output_path
                else:
                    # Create a temporary file
                    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.csv')
                    file_path = temp_file.name
                    temp_file.close()
                    self.temp_files.append(file_path)  # Track for cleanup
                
                # Save to disk
                df.to_csv(file_path, index=False)
                print(f"Inventory saved to: {file_path}")
            
            # Apply any additional processing
            df = self._process_dataframe(df)
            
            return df
            
        except Exception as e:
            print(f"Error getting inventory: {str(e)}")
            return None
    
    def _process_dataframe(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        Process the inventory DataFrame with any necessary transformations.
        
        Args:
            df: Raw inventory DataFrame
            
        Returns:
            pandas.DataFrame: Processed inventory data
        """
        # Implement any transformations needed:
        # - Standardize column names (lowercasing, remove spaces)
        df.columns = [col.lower().strip().replace(' ', '_') for col in df.columns]
        
        # - Convert data types
        # - Fill missing values
        # - Add calculated fields
        
        return df
    
    def compare_with_database(self, df: pd.DataFrame, db_session) -> Dict[str, Any]:
        """
        Compare downloaded inventory with database records.
        
        Args:
            df: Inventory DataFrame
            db_session: SQLAlchemy database session
            
        Returns:
            Dict containing difference statistics
        """
        # This is a placeholder - implement based on your database schema
        # Example implementation:
        """
        from sqlalchemy import select
        from app.models.product import Product, PlatformCommon
        
        # Get all VintageAndRare listings from the database
        query = (
            select(Product, PlatformCommon)
            .join(PlatformCommon)
            .where(PlatformCommon.platform_name == 'vintageandrare')
        )
        result = db_session.execute(query).all()
        
        # Extract external IDs and statuses
        db_records = {
            pl.external_id: {
                'product_id': p.id,
                'status': pl.status,
                'price': p.price
            }
            for p, pl in result
        }
        
        # Compare with CSV data
        inventory_records = {
            row['product_id']: {
                'price': row['product_price'],
                'sold': row['product_sold'].lower() == 'yes'
            }
            for _, row in df.iterrows() if 'product_id' in row and pd.notna(row['product_id'])
        }
        
        # Find differences
        differences = {
            'new_items': [id for id in inventory_records if id not in db_records],
            'missing_items': [id for id in db_records if id not in inventory_records],
            'price_changes': [
                {
                    'id': id,
                    'db_price': db_records[id]['price'],
                    'vr_price': inventory_records[id]['price']
                }
                for id in inventory_records
                if id in db_records and float(inventory_records[id]['price']) != float(db_records[id]['price'])
            ],
            'status_changes': [
                {
                    'id': id,
                    'is_sold': inventory_records[id]['sold'],
                    'db_status': db_records[id]['status']
                }
                for id in inventory_records
                if id in db_records and inventory_records[id]['sold'] != (db_records[id]['status'] == 'SOLD')
            ]
        }
        
        return differences
        """
        
        # Simple placeholder implementation
        return {
            'total_records': len(df),
            'implementation_needed': True
        }
    
    def cleanup(self):
        """Remove any temporary files created during operation."""
        for temp_file in self.temp_files:
            try:
                if os.path.exists(temp_file):
                    os.unlink(temp_file)
                    print(f"Removed temporary file: {temp_file}")
            except Exception as e:
                print(f"Error removing temporary file {temp_file}: {str(e)}")
        
        # Clear the list
        self.temp_files = []
    
    def __del__(self):
        """Destructor to ensure cleanup of temporary files."""
        self.cleanup()